/// Mixin for easy breakpoint manipulation
/// @param {String} $breakpoint
/// Usage: @include for-device(small) {}
@mixin for-device($breakpoint) {
  @media screen and (min-width: map-get($breakpoints, $breakpoint)) {
    @content;
  }
}

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin abs-centerer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/// BUTTON GENERATOR
@mixin button($bg, $color: null, $border: darken($bg, 7)) {
  background: $bg;
  @if ($border != 0) {
    border: 1px solid $border;
  }
  @if (lightness($bg) < 50% and $color == null) {
    color: white;
  } @else if ($color == null) {
    color: black;
  } @else {
    color: $color;
  }
  &:hover {
    background: darken($bg, 7%);
    transition: all 250ms ease;
  }
  &:active {
    background: darken($bg, 15%);
  }
}

/// LINK STYLE GENERATOR
// USAGE: @include link-style(yellow, $hover: blue) {};
@mixin link-style($link, $visited: darken($link,10), $hover: lighten($link,10), $active: $hover) {
  a {
    color: $link;

    &:visited {
      color: $visited;
    }

    &:hover {
      color: $hover;
    }

    &:active {
      color: $active;
    }
  }
}

/// POSITION GENERATOR
/// @param {String} $type - define position type
/// @param {String} $top - direction
/// @param {String} $right - direction
/// @param {String} $bottom - direction
/// @param {String} $left - direction
// Usage: @include position(absolute, 10px, 0, 50px, 15px) {};
@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {
  position: $type;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin size($width, $height: $width) {
  widtH: $width;
  height: $height;
}

@mixin span($size, $columns: $grid-columns, $gap: $grid-gap) {
  width: $size / $columns * 100%;
  box-sizing: border-box;
  display: block;
  float: left;
  padding-right: $gap;
}

/// For quick margin/padding
@mixin margin-padding($mg: null, $pd: null) {
  margin: $mg;
  padding: $pd;
}